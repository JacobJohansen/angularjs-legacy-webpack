{
  env: {
      # hello this is my comment
      browser: true,
      commonjs: true,
      es6: true, # hello this is my comment
      jasmine: true
  },
  globals: {
    angular: true
  },
  parserOptions: {
    sourceType: "module"
  },
  plugins: [
    "angular"
  ],
  rules: {
    # The comment 'Could break a lot of thing in some project!' means: 'Should be tried project by project'

    ## Possible Errors
    no-cond-assign: ["warn", "always"],
    no-console: "warn",
    no-constant-condition: "warn",
    no-control-regex: "warn",
    no-debugger: "warn",
    no-dupe-args: "warn", # On use strict mode there is a parsing error because the linter
    no-dupe-keys: "warn",
    no-duplicate-case: "warn",
    no-empty-character-class: "warn",
    no-empty: "warn",
    no-ex-assign: "warn",
    no-extra-boolean-cast: "warn",
    no-extra-parens: ["off", "all"],
    no-extra-semi: "warn",
    no-func-assign: "warn",
    no-innver-declarations: "off", # Ignored because 'In JavaScript, prior to ES6' and we use ES6
    no-invalid-regexp: "warn",
    no-irregular-whitespace: "warn",
    no-obj-calls: "warn",
    no-prototype-builtins: "warn", # Maybe remove it if your project use a lot of these
    no-regex-spaces: "warn",
    no-sparse-arrays: "warn",
    no-template-curly-in-string: "warn",
    no-unexpected-multiline: "warn",
    no-unreachable: "warn",
    no-unsafe-finally: "warn",
    no-unsafe-negation: "warn",
    use-isnan: "warn",
    valid-jsdoc: "warn", # Could break a lot of thing in some project!
    valid-typeof: "warn",

    ## Best Practices
    accessor-pairs: "off",
    array-callback-return: "warn",
    block-scoped-var: "warn",
    class-methods-use-this: "off", # Not compatible with Angular, because if function is called in template, the static will break the automatic link to this
    complexity: "off", # Should look  in practice if this rule is usable
    consistent-return: "off",
    curly: ["warn", "all"],
    default-case: "off", # We could allow this rule and use the skip default comment
    dot-location: ["warn", "property"],
    dot-notation: "warn",
    eqeqeq: ["warn", "always"],
    guard-for-in: "warn", # Could break a lot of thing in some project!
    no-alert: "warn",
    no-caller: "warn",
    no-case-declarations: "warn",
    no-div-regex: "warn",
    no-else-return: "warn", # Could break a lot of thing in some project!
    no-empty-function: "warn", # Maybe we could except that for functions, arrowFunctions and methods
    no-empty-pattern: "warn",
    no-eq-null: "warn", # Could break a lot of thing in some project!
    no-eval: "warn",
    no-extend-native: "warn",
    no-extra-bind: "warn",
    no-extra-label: "warn",
    no-fallthrough: "warn",
    no-floating-decimal: "warn",
    no-global-assign: "warn",
    no-implicit-coercion: ["warn", { "allow": ["!!", "+"] }],
    no-implicit-globals: "warn",
    no-implied-eval: "warn",
    no-invalid-this: "warn", # Could break a lot of thing in some project!
    no-iterator: "warn",
    no-labels: "warn",
    no-lone-blocks: "warn",
    no-loop-func: "warn",
    no-magic-numbers: "warn", # Could break a lot of thing in some project!
    no-multi-spaces: "warn",
    no-multi-str: "warn",
    no-new-func: "warn",
    no-new-wrappers: "warn",
    no-new: "warn",
    no-octal-escape: "warn",
    no-octal: "warn",
    no-param-reassign: "warn", # Could also does not allow reassign of property
    no-proto: "warn",
    no-redeclare: "warn",
    no-restricted-properties: "off", # Maybe we should look at what other people do for that
    no-return-assign: "off", # Because: promise.then(result => vm.result = result); trigger the error https://github.com/eslint/eslint/issues/5150
    no-script-url: "warn",
    no-self-assign: "warn",
    no-self-compare: "warn",
    no-sequences: "warn",
    no-throw-literal: "warn",
    no-unmodified-loop-condition: "warn",
    no-unused-expressions: "warn", # Could break a lot of thing in some project! Maybe, we should allow ternary and short circuit!
    no-unused-labels: "warn",
    no-useless-call: "warn",
    no-useless-concat: "warn",
    no-useless-escape: "warn",
    no-void: "warn",
    no-warning-comments: "warn",
    no-with: "warn",
    radix: "warn",
    vars-on-top: "warn",
    wrap-iife: "off", # Do not need it with Webpack
    yoda: "warn",

    ## Node.js and CommonJS
    # TODO

    ## Stylistic Issues
    array-bracket-spacing: "error",
    block-spacing: "error",
    brace-style: ["error", "1tbs", { allowSingleLine: false }], # Could break a lot of thing in some project!
    camelcase: "error",
    comma-spacing: "error",
    comma-style: "error",
    computed-property-spacing: "error",
    consistent-this: ["error", "vm", "_this"],
    eol-last: "error",
    func-call-spacing: "error",
    func-name-matching: "off",
    func-names: "off",
    func-style: "off",
    id-blacklist: "off",
    id-length: "off",
    id-match: "off",
    indent: ["error", 2, { "SwitchCase": 1 }],
    jsx-quotes: "off",
    key-spacing: "error",
    keyword-spacing: "error",
    line-comment-position: "off", # We want above and beside
    lines-around-comment: "error", # Maybe, we can disable it
    linebreak-style: "error",
    lines-around-directive: "off",
    max-depth: ["error", 7],
    max-len: ["error", 180, 2, { ignoreUrls: true, ignoreComments: false, ignoreTrailingComments: true, ignoreStrings: true, ignoreTemplateLiterals: true }], # The first idea was 200 max, have to see
    max-lines: ["error", { max: 300, skipBlankLines: true, skipComments: true }],
    max-nested-callbacks: ["error", 3], # 3 Could be a little bit low, increase it to off if necessary
    max-params: ["error", 10], # Because of Angular injection, this rules maybe should be disabled
    max-statements-per-line: ["error", { max: 1 }],
    multiline-ternary: ["error", "never"],
    new-cap: ["error", {capIsNew: false}],
    new-parens: "error",
    newline-after-var: "off",
    newline-before-return: "off",
    newline-per-chained-call: ["error", { ignoreChainWithDepth: 2 }], # Increase value to 4 ?
    no-array-constructor: "error",
    no-bitwise: "error",
    no-continue: "error",
    no-inline-comments: "off",
    no-lonely-if: "error",
    no-mixed-operators: ["error", { groups: [["+", "-", "*", "/", "%", "**"], ["&", "|", "^", "~", "<<", ">>", ">>>"], ["==", "!=", "===", "!==", ">", ">=", "<", "<="], ["&&", "||"], ["in", "instanceof"]], allowSamePrecedence: false }], # Could break a lot of thing in some project! (Disable it if too many modifications)
    no-mixed-spaces-and-tabs: "error",
    no-multiple-empty-lines: ["error", { max: 1, maxEOF: 1 }], # Maybe we could switch to max of 2
    no-negated-condition: "off",
    no-nested-ternary: "error",
    no-new-object: "error",
    no-plusplus: "off",
    no-restricted-syntax: ["error", "ForInStatement",  "ForOfStatement", "LabeledStatement", "WithStatement"], # This list is subject to changes and adaptation
    no-tabs: "error",
    no-ternary: "off",
    no-trailing-spaces: "error",
    no-underscore-dangle: "off",
    no-unneeded-ternary: "error",
    no-whitespace-before-property: "error",
    object-curly-newline: "off",
    object-curly-spacing: "off", # Should be careful, because IDE have their own formating on this rule
    one-var-declaration-per-line: "off",
    one-var: ["error", "never"],
    operator-assignment: "off",
    operator-linebreak: ["error", "before"], # Could be changed if needed
    padded-blocks: "off",
    quote-props: ["error", "as-needed", { keywords: true, unnecessary: true, numbers: false }],
    quotes: ["error", "single"],
    require-jsdoc: "off",
    semi-spacing: "error",
    semi: ["error", "always"],
    sort-keys: ["off", "asc", { caseSensitive: false, natural: true }], # Not always meaningful
    sort-vars: "off",
    space-before-blocks: "error",
    space-before-function-paren: ["error", "never"],
    space-in-parens: "off",
    space-infix-ops: "error",
    space-unary-ops: ["error", { words: true, nonwords: false }],
    spaced-comment: ["error", "always", { exceptions: ["*"] }],
    unicode-bom: "error",
    wrap-regex: "off"
  }
}
